version: '3.7'

services:
  drone-db:
    container_name: drone_db
    image: postgres:12
    ports:
      - '5432:5432'
    volumes:
      - drone_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DRONE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DRONE_POSTGRES_PASS}
      POSTGRES_DB: drone_db

  drone-server:
    container_name: drone-http-server
    image: drone/drone:1.10.1
    networks:
      - drone
    env_file:
      - ./.env
    restart: always
    ports:
      - '8080:80'
      - '4443:443'
    environment: 
      - DRONE_TLS_AUTOCERT=true
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_DATASOURCE}
      - DRONE_USER_FILTER=${DRONE_USER_FILTER}
      - DRONE_DATABASE_DRIVER=${DRONE_DATABASE_DRIVER}
    volumes: 
      - ./drone-data:/var/lib/drone/
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - drone-db

  drone-runner:
    container_name: drone-runner-1
    image: drone/drone-runner-docker:1.6.3
    networks:
      - drone
    env_file:
      - ./.env
    restart: always
    ports:
      - '3000:3000'
    environment: 
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
      - DRONE_RPC_HOST=${DRONE_SERVER_HOST}
      - DRONE_RPC_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - drone-server
      - drone-db


networks:
  drone:
    name: drone_network

volumes:
  drone_postgres_data:
    driver: local